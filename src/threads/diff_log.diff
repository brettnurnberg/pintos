diff --git a/src/threads/synch.c b/src/threads/synch.c
index 940a7e2..23eb7ef 100755
--- a/src/threads/synch.c
+++ b/src/threads/synch.c
@@ -214,13 +214,29 @@ lock_acquire (struct lock *lock)
   ASSERT (!intr_context ());
   ASSERT (!lock_held_by_current_thread (lock));
 
+  struct lock *lock_i = lock;
+  struct thread *t = lock->holder;
+
+  
+  while (t != NULL && is_boot_complete ())
+  {
+    thread_donate_priority (t, list_entry (list_begin (&lock_i->semaphore.waiters), struct thread, elem));
+    lock_i = t->lock_req;
+    t = t->lock_req->holder;
+  }
+
+#if 0
   if (lock->holder != NULL && is_boot_complete ())
   {
     thread_donate_priority (lock->holder, list_entry (list_begin (&lock->semaphore.waiters), struct thread, elem));
   }
- 
+#endif
+  
+  t->lock_req = lock;
   sema_down (&lock->semaphore);
+  
   lock->holder = thread_current ();
+  thread_current ()->lock_req = NULL;
 }
 
 /* Tries to acquires LOCK and returns true if successful or false
diff --git a/src/threads/thread.c b/src/threads/thread.c
index ee22f19..e66f059 100755
--- a/src/threads/thread.c
+++ b/src/threads/thread.c
@@ -588,6 +588,7 @@ init_thread (struct thread *t, const char *name, int priority)
   t->stack = (uint8_t *) t + PGSIZE;
   t->priority = priority;
   list_init (&t->priorities);
+  t->lock_req = NULL;
   t->magic = THREAD_MAGIC;
 
   old_level = intr_disable ();
diff --git a/src/threads/thread.h b/src/threads/thread.h
index 21553c1..ab44bd6 100755
--- a/src/threads/thread.h
+++ b/src/threads/thread.h
@@ -114,6 +114,7 @@ struct thread
     
     /* Owned by synch.c */
     struct list priorities;
+    struct lock *lock_req;
 
 #ifdef USERPROG
     /* Owned by userprog/process.c. */
