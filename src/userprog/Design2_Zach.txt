					+--------------------------+
					|         CIS 520          |
					| PROJECT 2: USER PROGRAMS |
					|     DESIGN DOCUMENT      |
					+--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Zach   Doll
Brandt Hill
Brett  Nurnberg

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

We based our wait_status structure definition on the project 2 session
document that is posted on canvas. We used all of the existing variables
in the struct and added a few more.
We also used the same format for our table of system calls that the project
2 session document uses.


			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

There are no new structs, global variables, typedef, or enumerations
for argument passing.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We utilized a string tokenizer which broke up arguements separated with the space character. We avoid overflowing the stack page by limiting the count to be less than 127
arguements, however, if you were to enter a series of very long arguements in theory it would overflow. We stored the elements in an array, and pushed them onto the stack 
by iterating over the length of the read in list of arguments from the end toward the beginning. This ensured that the arguments were on the stack in the correct order, 
then the pointers to the parameters were pushed on in the same last to first order, and finally, the filename was pushed on last.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Pintos uses strtok_r() because it allows for reentering. Reentering allows multiple threads to engage the function simulatneously. Using strtok(), which doesn't allow for
reentering, would likely crash the program.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. You can catch errors earlier, in the shell, rather than passing it all the way down to the kernel before implementing error checking.
2. The shell will have already separated the argument into it's constitutent parts, so that rather than passing the entire input, you can just pass the parts of the argument
that are required for the task at hand.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

extern struct lock fs_lock;

/* Track the completion of a process.
   Reference held by both the parent, in its `children' list,
   and by the child, in its 'wait_status' pointer. */
struct wait_status
  {
    struct list_elem elem;  /* 'children' list element. */
    bool is_checked;        /* True if parent has waited for child. */
    struct lock lock;       /* Protects ref_cnt. */
    int ref_cnt;            /* 2=child and parent both alive,
                               1=either child or parent alive,
                               0=child and parent both dead.*/
    tid_t tid;              /* Child thread id. */
    int exit_code;          /* Child exit code, if dead. */
    struct semaphore dead;  /* 0=child alive, 1=child dead. */
    struct semaphore load;  /* 1=process attempted load. */
  };

/* File descriptor struct */
struct file_descriptor
  {
    struct list_elem elem;  /* 'fds' list element. */
    struct file *file;      /* File pointer. */
    int handle;             /* File handle. */
  };

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a process opens a file, a variable handle which was initialized to 2 called the handler has the next available file descriptor handler. This is read in, associated with the 
file descriptor, and then incremented. It is unique to each process. This integer is removed when the file is closed.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

First, we verify that both the address and the address plus the size are valid and in range. We then check the file descriptor, if it is 0 or 1, it is standard I/O, and handled
with input_getc() or putbuf(). Otherwise, we get the file associated with that file descriptor, and if it is valid, aquire the file system lock then do our read/write.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

In both cases, 4k and 2 byte, it simply depends on whether or not the data is aligned to a page or not. If the full page of data is put onto a single full page, it will obviously
only need that one page pulled. Inversely, if those two bytes are split in half by the page break, you will need to pull in two full pages. The minimum number of pages that the 2
byte access would require is 1. The worst case scenario for the 4k access is also the most likely scenario which is where it will write over 2 pages, 1 full one, and one partial.

Enlarging the page size is one way to improve the odds that the good situation will occur and the bad situations will be avoided. However, it can never be guarenteed that the
good situation will occur.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Our implementation of wait reads in the process id, then calls process_wait with the inputted process id. process_wait checks the status of the inputted process id, finding the 
status of the child associated with the id. While the child is still allive, the parent thread is blocked. Once the child dies (is terminated) the parent begins executing again.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We developed a function called verify_address which checks that the address is valid pointer. By making this a separate function, the error checking is kept to a minimum, maximizing
code readability. If the address is every found to be invalid, thread_exit is called which, after calling process_exit, removes all temporary allocations. 

Our strategy was quite simple, we get the current pages page directory, then begin our checking process. The first check makes sure the inputted address is not null, is a user
address, and is in the page. Once that is verified, we calculate the end of the address by taking inputted address plus three. We then run the same check but on the end of the
address. If successful, the process will continue, if unsuccessful thread_exit is called, ending the process.

An example can be found in our sys_read, where after reading in the arguments, we call verify_address on buffer and buffer + size, which makes sure that both the beginning and the 
end of the data to be read are in range. This guarentees that all the data of the read will be in range.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Each thread has a load semaphore, which blocks the calling process until the new processes load has completed. The success/failure status is passed back by the value of 
the new processes id, which is -1 if unsuccessful, and anything else (positive) otherwise.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

We avoid race conditions and ensure proper synchronization between P and C in all cases by having a semaphore for each C of P. When P calls wait(C), it first finds C in it's
list of Cs. If it can find it, it returns -1. It this sees if the child's is_check value is 1, if it is, it returns the child's exit code. If it hasn't, it sets the childs 
is_check value to 1, then checks to see if the child is dead. If it is, it returns the child's exit code, if it isn't, it waits until it is.

We ensure that all resources are freed with a ref_cnt variable in our wait_status struct. This value starts at 2, and is decremented by one when the parent and/or child dies.
It will hit zero when both are dead, and that is when we free the resources.

There are no special cases.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We sought simplicity, believing that in our case, dumb but functioning was better than smart and buggy.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The main advantage of our file descriptors is their simplicity. However, making the handle unique to each process is also an advantage, as we don't have to worry about overall
syncrhonization problems.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change the tid_t to pid_t mapping in our implementation.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
